{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/optimise-implicit-objectives-with-breeding","result":{"data":{"brainNote":{"slug":"optimise-implicit-objectives-with-breeding","title":"Optimise implicit objectives with breeding","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Optimise implicit objectives with breeding\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Say you want to design via optimisation. You define a notion of good, and (let\\u2019s assume) it\\u2019s magically achieved. How do you define good?\"), mdx(\"p\", null, \"Defining good is hard. Try it. What, for instance, is a good house? How do you define beauty?\"), mdx(\"p\", null, \"We may not be able to define beauty, but we can \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"feel\"), \" beauty. We may not be able to define good, but given several things, we can often choose which things are better than others. This is why the breeding algorithm is so useful.\"), mdx(\"p\", null, \"The simplified breeding algorithm is simple. At each point in design space, you sample several directions, and choose the most promising ones. You move in a promising direction, and sample again. If you do this over and over again, you should end up with a point in design space that is better according to your implicit notion of good. If at every point on a hill, you walk up, you\\u2019re going to end up higher than where you started. Of course, you're also allowed to return to previous locations if you encounter a dead end.\"), mdx(\"p\", null, \"Breeding is an optimisation algorithm that doesn\\u2019t require an explicit objective. It only requires that you know good when you see it. It works. Dogs aren\\u2019t super cute by accident.\"), mdx(\"p\", null, \"I wrote this in reflection of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://ganbreeder.app/\"\n  }), \"Ganbreeder\"), \" and Joel Simon\\u2019s \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=8L1bNz4YYjg&t=1s\"\n  }), \"talk\"), \" on Ganbreeder and other things. By the way, I still think it\\u2019s useful to try to explicitly define good, but that\\u2019s a topic for another time.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Algorithmic design","slug":"algorithmic-design","childMdx":{"excerpt":"My favourite algorithmic design people: Joel Simon Nervous system Anders Hoff, see his essay  On generative algorithms Some thoughts on…"}},{"title":"Sampling is not algorithmic design","slug":"sampling-is-not-algorithmic-design","childMdx":{"excerpt":"Art and design projects involving GANs  have been pretty hot recently. And while I find them cool, I tend to find them less interesting than…"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Rheza's notes"}}},"pageContext":{"slug":"optimise-implicit-objectives-with-breeding"}}}